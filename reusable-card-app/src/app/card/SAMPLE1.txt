  @Test
    void getNettedPaymentRowsForManualPayment_shouldReturnPaymentLinesModelList() {
        // Arrange
        List<InvoicePayableModelForPayment> paymentList = new ArrayList<>();
        InvoicePayableModelForPayment invoicePayableModel = new InvoicePayableModelForPayment();
        invoicePayableModel.setProviderId("provider123");
        invoicePayableModel.setFeeCategory("feeCategory");
        InvoicePayable invoicePayable = new InvoicePayable();
        invoicePayable.setProviderMnemo("providerMnemo");
        invoicePayableModel.setInvoicePayable(invoicePayable);
        paymentList.add(invoicePayableModel);

        GroupingKey groupingKey = new GroupingKey("entity1", "USD");
        BigDecimal amount = new BigDecimal("100");

        when(referentialServiceApi.getPaymentDates(eq("entity1"), eq("USD"), eq("SWI"), eq("S"), eq("provider123"), eq("feeCategory")))
                .thenReturn(new PaymentDates("2024-03-15", "2024-03-14"));

        when(invoiceServiceApi.getListOfBapDetailsForMultipleInvoices(anyList()))
                .thenReturn(Arrays.asList(new BapPayableModel("portfolio1"), new BapPayableModel("portfolio2")));

        when(referentialServiceApi.getPortfolioDetailsBasedOnMnemonic(eq("portfolio1")))
                .thenReturn(new PortfolioAdvanceDetailResponse("bdrId1"));
        when(referentialServiceApi.getPortfolioDetailsBasedOnMnemonic(eq("portfolio2")))
                .thenReturn(new PortfolioAdvanceDetailResponse("bdrId2"));

        when(referentialServiceApi.getSettlementAccounts(eq("USD"), eq("entity1"), eq("bdrId1")))
                .thenReturn(Arrays.asList(new SettlementsAccounts("account1"), new SettlementsAccounts("account2")));
        when(referentialServiceApi.getSettlementAccounts(eq("USD"), eq("entity1"), eq("bdrId2")))
                .thenReturn(Arrays.asList(new SettlementsAccounts("account3")));

        // Act
        List<PaymentLinesModel> result = cashAllocationDomain.getNettedPaymentRowsForManualPayment(paymentList, "user");

        // Assert
        assertEquals(1, result.size());
        PaymentLinesModel paymentLinesModel = result.get(0);
        assertEquals("entity1", paymentLinesModel.getSgEntity());
        assertEquals("provider123", paymentLinesModel.getProviderId());
        assertEquals("providerMnemo", paymentLinesModel.getBrokerName());
        assertEquals("2024-03-15", paymentLinesModel.getValueDate());
        assertEquals("2024-03-14", paymentLinesModel.getSendingDate());
        assertEquals(3, paymentLinesModel.getNumberOfSSI());
        assertEquals("USD", paymentLinesModel.getCurrency());
        assertEquals(Arrays.asList("account1", "account2", "account3"), paymentLinesModel.getSsiAccountCode());
        assertEquals("D", paymentLinesModel.getPaymentDirection());
        assertEquals(amount, paymentLinesModel.getAmount());
        assertEquals("R", paymentLinesModel.getPaymentStatus());
    }