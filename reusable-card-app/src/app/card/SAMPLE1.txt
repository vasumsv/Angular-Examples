 @Test
    void updateCashAllocationStatus_invalidInvoiceStatus_throwsException() {
        // Arrange
        String status = "AnyStatus";
        ProcessCashRequest processCashRequest = new ProcessCashRequest();
        processCashRequest.setInvoiceRefs(Collections.singletonList("RSF-123"));
        String actionPerformedBy = "TestUser";

        InvoicesAb invoiceAb = new InvoicesAb();
        invoiceAb.setInvoiceReference("RSF-123");
        invoiceAb.setInvoiceStatus(InvoiceServiceEnums.DRAFT.getValue()); // Set an invalid status
        InvoicesAbList invoicesAbList = new InvoicesAbList();
        invoicesAbList.setInvoicesAb(Collections.singletonList(invoiceAb));

        when(invoiceServiceApi.getAbInvoice(", RSF-123, ")).thenReturn(invoicesAbList);

        // Act & Assert
        CashAllocationCustomException exception = assertThrows(CashAllocationCustomException.class,
                () -> cashAllocationDomain.updateCashAllocationStatus(status, processCashRequest, actionPerformedBy));

        assertTrue(exception.getMessage().contains("Invoice Status should not be DRAFT / AMENDED / CANCELLED"));
    }

    @Test
    void updateCashAllocationStatus_statusMatched_matchedCashModelsNotEmpty_setsValueDate() {
        // Arrange
        String status = "MATCHED";
        ProcessCashRequest processCashRequest = new ProcessCashRequest();
        processCashRequest.setInvoiceRefs(Collections.singletonList("INV-456"));
        String actionPerformedBy = "TestUser";

        // Mocking the behavior of statusMatched method
        when(cashAllocationDomain.statusMatched(eq(status), eq(processCashRequest), eq(actionPerformedBy), any(), any(), any(), any()))
                .thenReturn(Collections.singletonList(new CashAllocationModel() {{
                    setValueDate(java.time.LocalDate.now());
                }}));

        // Act
        ABProcessingRequest result = cashAllocationDomain.updateCashAllocationStatus(status, processCashRequest, actionPerformedBy);

        // Assert
        assertNotNull(result);
        assertNotNull(result.getProcessCashRequest());
        assertNotNull(result.getProcessCashRequest().getValueDate());
    }