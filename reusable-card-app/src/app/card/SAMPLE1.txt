 @Test
    void testAutoPaymentMatching_Sunday3() {
        // Explicitly set the time zone
        ZoneId zoneId = ZoneId.systemDefault(); // Or specify your time zone (e.g., ZoneId.of("America/New_York"))

        // Create a Monday date
        LocalDate monday = LocalDate.of(2023, 10, 30); // Example Monday

        // Adjust daysToSubtract to make valueDateEnd a Sunday
        int daysToSubtract = 1; // Subtract one day from Monday to get Sunday
        LocalDate sunday = monday.minusDays(daysToSubtract);

        // Mock LocalDate.now(zoneId) to return the Monday
        try (var mockedStatic = mockStatic(LocalDate.class)) {
            mockedStatic.when(() -> LocalDate.now(any(ZoneId.class))).thenReturn(monday);

            // Call the method
            cashAllocationDomain.autoPaymentMatching();

            // Verify that findPaymentLinesForAutoMatching is called with the expected date (Friday)
            verify(cashAllocationRepositoryApi, times(2)).findPaymentLinesForAutoMatching(anyList(), anyList(), anyString(), eq(sunday.minusDays(2)));
        }
    }

    @Test
    void testAutoPaymentMatching_Exception3() {
        // Mock LocalDate.now() to throw an exception
        try (var mockedStatic = mockStatic(LocalDate.class)) {
            mockedStatic.when(LocalDate::now).thenThrow(new RuntimeException());

            // Verify that CashAllocationCustomException is thrown
            assertThrows(CashAllocationCustomException.class, () -> {
                cashAllocationDomain.autoPaymentMatching();
            });
        }
    }