@Test
    void getNettedRows_paymentModeUnavailable() throws Exception {
        // Arrange
        List<InvoicePayableModelForPayment> paymentList = new ArrayList<>();
        InvoicePayableModelForPayment invoice = new InvoicePayableModelForPayment();
        invoice.setProviderId("123");
        invoice.setFeeCategory("456");
        invoice.setInvoiceReference("ABC789");
        paymentList.add(invoice);

        when(referentialServiceApi.getPaymentModeAndSettlementLocation(
                any(BigInteger.class), anyString(), any(BigInteger.class), any(BigInteger.class), anyString(), anyString()))
                .thenThrow(new Exception("Payment Mode unavailable"));

        // Act
        List<PaymentLinesModel> result = cashAllocationDomain.getNettedRows(paymentList, "user");

        // Assert
        assertEquals(1, result.size());
        assertEquals("Payment Mode unavailable for provider 123AND_CURRENCYUSD", result.get(0).getComment()); 
    }

    @Test
    void getNettedRows_paymentDatesUnavailable() throws Exception {
        // Arrange
        List<InvoicePayableModelForPayment> paymentList = new ArrayList<>();
        InvoicePayableModelForPayment invoice = new InvoicePayableModelForPayment();
        invoice.setProviderId("123");
        invoice.setFeeCategory("456");
        invoice.setInvoiceReference("ABC789");
        paymentList.add(invoice);

        PaymentModeAndLocationModel paymentModeAndLocationModel = new PaymentModeAndLocationModel();
        paymentModeAndLocationModel.setPaymentMode("Mode1");

        when(referentialServiceApi.getPaymentModeAndSettlementLocation(
                any(BigInteger.class), anyString(), any(BigInteger.class), any(BigInteger.class), anyString(), anyString()))
                .thenReturn(paymentModeAndLocationModel);

        when(referentialServiceApi.getPaymentDates(anyString(), anyString(), anyString(), anyString(), anyString(), anyString()))
                .thenThrow(new Exception("Payment Dates unavailable"));

        // Act
        List<PaymentLinesModel> result = cashAllocationDomain.getNettedRows(paymentList, "user");

        // Assert
        assertEquals(1, result.size());
        assertEquals("Payment Dates unavailable for entity nullAND_CURRENCYUSD", result.get(0).getComment());
    }