 @Test
    void testFetchAckDetails_ApiResponseNull() {
        // Arrange
        LocalDate today = LocalDate.now();
        List<PaymentLineDetailsForInvoice> paymentDetails = new ArrayList<>();
        PaymentLineDetailsForInvoice paymentDetail = new PaymentLineDetailsForInvoice();
        SrgPaymentRequest srgPaymentRequest = new SrgPaymentRequest();
        srgPaymentRequest.setPaymentReference("ref123");
        paymentDetail.setSrgPaymentRequest(srgPaymentRequest);
        paymentDetails.add(paymentDetail);

        when(paymentRepository.getPaymentLinesForToday(today)).thenReturn(paymentDetails);
        when(srgAckClient.sendingPmtRequest(any(SrgAckSentRequest.class))).thenReturn(null); // Simulate null apiResponse

        // Act
        srgAckApiClient.fetchAckDetails();

        // Assert
        verify(paymentRepository, never()).updateCommentsAndFlowStatus(any(PaymentLineDetailsForInvoice.class));
    }

    @Test
    void testFetchAckDetails_DataNotNullAndNotEmpty_Accepted() {
        // Arrange
        LocalDate today = LocalDate.now();
        List<PaymentLineDetailsForInvoice> paymentDetails = new ArrayList<>();
        PaymentLineDetailsForInvoice paymentDetail = new PaymentLineDetailsForInvoice();
        SrgPaymentRequest srgPaymentRequest = new SrgPaymentRequest();
        srgPaymentRequest.setPaymentReference("ref123");
        paymentDetail.setSrgPaymentRequest(srgPaymentRequest);
        paymentDetails.add(paymentDetail);

        SrgAckResponseModel responseModel = new SrgAckResponseModel();
        SrgAckResponseModel.Data data = new SrgAckResponseModel.Data();
        data.setFlowStatus("ACCEPTED");
        responseModel.setData(List.of(data));

        when(paymentRepository.getPaymentLinesForToday(today)).thenReturn(paymentDetails);
        when(srgAckClient.sendingPmtRequest(any(SrgAckSentRequest.class))).thenReturn(responseModel);

        // Act
        srgAckApiClient.fetchAckDetails();

        // Assert
        assertEquals("ACCEPTED", paymentDetail.getAckStatus());
    }

    @Test
    void testFetchAckDetails_DataNotNullAndNotEmpty_Rejected() {
        // Arrange
        LocalDate today = LocalDate.now();
        List<PaymentLineDetailsForInvoice> paymentDetails = new ArrayList<>();
        PaymentLineDetailsForInvoice paymentDetail = new PaymentLineDetailsForInvoice();
        SrgPaymentRequest srgPaymentRequest = new SrgPaymentRequest();
        srgPaymentRequest.setPaymentReference("ref123");
        paymentDetail.setSrgPaymentRequest(srgPaymentRequest);
        paymentDetails.add(paymentDetail);

        SrgAckResponseModel responseModel = new SrgAckResponseModel();
        SrgAckResponseModel.Data data = new SrgAckResponseModel.Data();
        data.setFlowStatus("REJECTED");
        data.setErrorMessage("Test Error Message");
        responseModel.setData(List.of(data));

        when(paymentRepository.getPaymentLinesForToday(today)).thenReturn(paymentDetails);
        when(srgAckClient.sendingPmtRequest(any(SrgAckSentRequest.class))).thenReturn(responseModel);

        // Act
        srgAckApiClient.fetchAckDetails();

        // Assert
        assertEquals("REJECTED", paymentDetail.getAckStatus());
        assertEquals("Test Error Message", paymentDetail.getComsg());
    }

    @Test
    void testFetchAckDetails_DataNullOrEmpty() {
        // Arrange
        LocalDate today = LocalDate.now();
        List<PaymentLineDetailsForInvoice> paymentDetails = new ArrayList<>();
        PaymentLineDetailsForInvoice paymentDetail = new PaymentLineDetailsForInvoice();
        SrgPaymentRequest srgPaymentRequest = new SrgPaymentRequest();
        srgPaymentRequest.setPaymentReference("ref123");
        paymentDetail.setSrgPaymentRequest(srgPaymentRequest);
        paymentDetails.add(paymentDetail);

        SrgAckResponseModel responseModel = new SrgAckResponseModel();
        responseModel.setData(new ArrayList<>()); // Empty data list

        when(paymentRepository.getPaymentLinesForToday(today)).thenReturn(paymentDetails);
        when(srgAckClient.sendingPmtRequest(any(SrgAckSentRequest.class))).thenReturn(responseModel);

        // Act
        srgAckApiClient.fetchAckDetails();

        // Assert
        verify(paymentRepository, never()).updateCommentsAndFlowStatus(any(PaymentLineDetailsForInvoice.class));
    }