
    @Test
    void testInsertPaymentLines_SetProperties() {
        // Create a list of PaymentLinesFeoModel objects
        List<PaymentLinesFeoModel> paymentLines = new ArrayList<>();
        PaymentLinesFeoModel paymentLine1 = new PaymentLinesFeoModel();
        paymentLine1.setInvoiceReference("INV123");
        paymentLine1.setAmount(BigDecimal.TEN);
        paymentLine1.setProviderId("PROV1");
        paymentLine1.setProviderMnemonic("MNEM1");
        paymentLine1.setEntityBdrId("123");
        paymentLine1.setRefCptyId("REF123");
        paymentLines.add(paymentLine1);

        // Mock InvoiceServiceApi.getListOfInvoices()
        List<InvoicePayableModel> invoices = new ArrayList<>();
        InvoicePayableModel invoice1 = new InvoicePayableModel();
        invoice1.setInvoiceReference("INV123");
        invoice1.setAmount(BigDecimal.TEN);
        invoice1.setInvoiceType("CREDIT");
        invoices.add(invoice1);

        when(invoiceServiceApi.getListOfInvoices(List.of("INV123"))).thenReturn(invoices);

        // Mock ReferentialServiceApi.getProviderDetails()
        ProviderDetails providerDetails = new ProviderDetails();
        when(referentialServiceApi.getProviderDetails("PROV1", "MNEM1")).thenReturn(providerDetails);

        // Mock ReferentialServiceApi.getUserInitials()
        UserDetailsModel userDetailsModel = new UserDetailsModel();
        userDetailsModel.setIni("USER");
        when(referentialServiceApi.getUserInitials("testUser")).thenReturn(userDetailsModel);

        // Mock ReferentialServiceApi.getEntireListOfEntities()
        List<EntityDetails> entities = new ArrayList<>();
        EntityDetails entity = new EntityDetails();
        entity.setEntityCode("CODE123");
        entities.add(entity);
        when(referentialServiceApi.getEntireListOfEntities()).thenReturn(entities);

        // Mock ReferentialServiceApi.getBackOfficeDetails()
        BackOfficeDetails backOfficeDetails = new BackOfficeDetails();
        backOfficeDetails.setNomVal("BACKOFFICE");
        when(referentialServiceApi.getBackOfficeDetails("CODE123", "CODGRPHABBO")).thenReturn(backOfficeDetails);

        // Mock PaymentRepository.getNextSrgSequence()
        when(paymentRepository.getNextSrgSequence()).thenReturn(BigDecimal.ONE.toBigInteger());

        // Call the method
        InsertPaymentResponse response = cashAllocationDomain.insertPaymentLines(paymentLines, "testUser");

        // Verify that the response is successful
        assertNull(response.getErrorMessage());
    }