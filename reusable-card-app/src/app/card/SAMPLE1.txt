  @Test
    void testGetPaymentLinesFromPaymentReference() {
        // Setup test data
        String[] paymentReferences = {"REF123-1", "REF123-2"};

        // Mock paymentRepository
        List<PaymentEntity> paymentEntities1 = new ArrayList<>();
        PaymentEntity paymentEntity1 = new PaymentEntity();
        // Set properties of paymentEntity1 if needed
        paymentEntities1.add(paymentEntity1);

        List<PaymentEntity> paymentEntities2 = new ArrayList<>();
        PaymentEntity paymentEntity2 = new PaymentEntity();
        // Set properties of paymentEntity2 if needed
        paymentEntities2.add(paymentEntity2);

        when(paymentRepository.getPaymentEntitiesByPaymentReference("REF123-1")).thenReturn(paymentEntities1);
        when(paymentRepository.getPaymentEntitiesByPaymentReference("REF123-2")).thenReturn(paymentEntities2);

        // Mock getSsiDetails
        List<String> ssiDetails1 = new ArrayList<>();
        ssiDetails1.add("SSI1-A");
        ssiDetails1.add("SSI1-B");
        when(paymentRepository.getSsiDetailsByProviderAndCurrencyAndEntityAndFeeCategory("PROV1", "USD", "SG123", "Fee1")).thenReturn(ssiDetails1);

        List<String> ssiDetails2 = new ArrayList<>();
        ssiDetails2.add("SSI2-A");
        ssiDetails2.add("SSI2-B");
        when(paymentRepository.getSsiDetailsByProviderAndCurrencyAndEntityAndFeeCategory("PROV1", "USD", "SG123", "Fee1")).thenReturn(ssiDetails2);

        // Execute the method
        List<PaymentLinesModel> result = cashAllocationDomain.getPaymentLinesFromPaymentReference(paymentReferences);

        // Verify the result
        assertEquals(2, result.size());

        // Verify the first PaymentLinesModel
        PaymentLinesModel paymentLinesModel1 = result.get(0);