  @Test
    void testCashAllocationModelList_InvoiceRef_LongLine() {
        List<String> lines = new ArrayList<>();
        String longLine = " ".repeat(514) + "invoiceRefFromLongLine";
        lines.add(longLine);
        String fileName = "DATA_REC_FILE";
        Mockito.when(cashAllocationDomain.getCashAllocationModel(Mockito.anyString(), Mockito.any(BigDecimal.class), Mockito.anyString(), Mockito.anyString(), Mockito.any(Date.class), Mockito.anyString()))
            .thenReturn(new CashAllocationModel());

        List<CashAllocationModel> result = cashAllocationDomain.cashAllocationModelList(lines, fileName);

        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals("invoiceRefFromLongLine", result.get(0).getInvoiceRef());
    }

    @Test
    void testCashAllocationModelList_InvoiceRef_ShortLine() {
        List<String> lines = new ArrayList<>();
        String shortLine = " ".repeat(116) + "invoiceRefFromShortLine" + " ".repeat(358);
        lines.add(shortLine);
        String fileName = "DATA_REC_FILE";
        Mockito.when(cashAllocationDomain.getInvoiceRefFromSupplementaryDetails(Mockito.anyString())).thenReturn("invoiceRefFromShortLine");
        Mockito.when(cashAllocationDomain.getCashAllocationModel(Mockito.anyString(), Mockito.any(BigDecimal.class), Mockito.anyString(), Mockito.anyString(), Mockito.any(Date.class), Mockito.anyString()))
            .thenReturn(new CashAllocationModel());

        List<CashAllocationModel> result = cashAllocationDomain.cashAllocationModelList(lines, fileName);

        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals("invoiceRefFromShortLine", result.get(0).getInvoiceRef());
    }

    @Test
    void testCashAllocationModelList_InvoiceRef_Exception() {
        List<String> lines = new ArrayList<>();
        lines.add(" ".repeat(116) + "anyValue" + " ".repeat(358));
        String fileName = "DATA_REC_FILE";
        Mockito.when(cashAllocationDomain.getInvoiceRefFromSupplementaryDetails(Mockito.anyString())).thenThrow(new RuntimeException("Test Exception"));

        List<CashAllocationModel> result = cashAllocationDomain.cashAllocationModelList(lines, fileName);

        assertNotNull(result);
        assertEquals(0, result.size());
    }

    @Test
    void testCashAllocationModelList_DateParsing_Valid() throws Exception {
        List<String> lines = new ArrayList<>();
        lines.add(" ".repeat(24) + "20231027" + " ".repeat(76));
        String fileName = "DATA_REC_FILE";
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMdd");
        Date expectedDate = dateFormat.parse("20231027");
        Mockito.when(cashAllocationDomain.getCashAllocationModel(Mockito.anyString(), Mockito.any(BigDecimal.class), Mockito.anyString(), Mockito.anyString(), Mockito.any(Date.class), Mockito.anyString()))
            .thenReturn(new CashAllocationModel());

        List<CashAllocationModel> result = cashAllocationDomain.cashAllocationModelList(lines, fileName);

        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals(expectedDate, result.get(0).getDate());
    }

    @Test
    void testCashAllocationModelList_DateParsing_Invalid() {
        List<String> lines = new ArrayList<>();
        lines.add(" ".repeat(24) + "invalidDate" + " ".repeat(76));
        String fileName = "DATA_REC_FILE";

        List<CashAllocationModel> result = cashAllocationDomain.cashAllocationModelList(lines, fileName);

        assertNotNull(result);
        assertEquals(0, result.size());
    }