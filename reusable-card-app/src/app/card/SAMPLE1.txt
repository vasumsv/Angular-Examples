 @Test
    void testTransferFile_DirectoryCreation() {
        // Prepare data
        LocalDate date = LocalDate.now();
        List<CashAllocationModel> cashAllocationModels = new ArrayList<>();
        CashAllocationModel model = new CashAllocationModel();
        model.setInvoiceMatched("RSF-123");
        model.setCounterPartyId("CP123");
        cashAllocationModels.add(model);

        // Call the method
        abDomain.transferFile(date, cashAllocationModels);

        // Verify that the directory was created
        File dir = new File(".");
        assertTrue(dir.exists());
    }

    @Test
    void testTransferFile_FalseInvoiceContainment() {
        // Prepare data
        LocalDate date = LocalDate.now();
        List<CashAllocationModel> cashAllocationModels = new ArrayList<>();
        CashAllocationModel model = new CashAllocationModel();
        model.setInvoiceMatched("INV-456"); // Different invoice
        model.setCounterPartyId("CP123");
        cashAllocationModels.add(model);

        // Call the method
        abDomain.transferFile(date, cashAllocationModels);

        // Verify that uploadPaymentAbFileViaReferential() was called (no exception)
        verify(referentialServiceApi).uploadPaymentAbFileViaReferential(anyString());
    }

    @Test
    void testTransferFile_NullLineHandling() throws IOException {
        // Prepare data
        LocalDate date = LocalDate.now();
        List<CashAllocationModel> cashAllocationModels = new ArrayList<>();
        CashAllocationModel model = new CashAllocationModel();
        model.setInvoiceMatched("RSF-123");
        model.setCounterPartyId("CP123");
        cashAllocationModels.add(model);

        // Mock buildLine() to return null
        AbDomain abDomainSpy = spy(abDomain);
        doReturn(null).when(abDomainSpy).buildLine(any(CashAllocationModel.class), anyString());

        // Call the method
        abDomainSpy.transferFile(date, cashAllocationModels);

        // Verify that uploadPaymentAbFileViaReferential() was called (no exception)
        verify(referentialServiceApi).uploadPaymentAbFileViaReferential(anyString());
    }

    @Test
    void testTransferFile_LineBuildingException() throws IOException {
        // Prepare data
        LocalDate date = LocalDate.now();
        List<CashAllocationModel> cashAllocationModels = new ArrayList<>();
        CashAllocationModel model = new CashAllocationModel();
        model.setInvoiceMatched("RSF-123");
        model.setCounterPartyId("CP123");
        cashAllocationModels.add(model);

        // Mock buildLine() to throw an exception
        AbDomain abDomainSpy = spy(abDomain);
        doThrow(new RuntimeException("Line building exception")).when(abDomainSpy).buildLine(any(CashAllocationModel.class), anyString());

        // Call the method
        abDomainSpy.transferFile(date, cashAllocationModels);

        // Verify that uploadPaymentAbFileViaReferential() was called (no exception)
        verify(referentialServiceApi).uploadPaymentAbFileViaReferential(anyString());
    }