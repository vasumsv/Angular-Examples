 @Test
    public void testGetPaymentLinesFromPaymentReference() throws Exception { // Note the 'throws Exception'
        // Arrange
        String[] paymentReferences = {"REF1", "REF2"};

        SrgPaymentModel srgPaymentModel = new SrgPaymentModel();
        srgPaymentModel.setId(1L);
        srgPaymentModel.setProviderBdrId("PROVIDER123");
        srgPaymentModel.setPaymentCurrency("USD");
        srgPaymentModel.setSgEntity("SGENTITY");
        srgPaymentModel.setFeeCategory("FEE");
        srgPaymentModel.setInvoiceReference("INV1,INV2");
        srgPaymentModel.setProviderName("BrokerA");
        srgPaymentModel.setValueDate("2023-10-27");
        srgPaymentModel.setSendingDate("2023-10-26");
        srgPaymentModel.setPaymentAmount(100.0);
        srgPaymentModel.setPaymentType("TYPE");
        srgPaymentModel.setDebitCredit("CR");
        srgPaymentModel.setPaymentMode("MODE");
        srgPaymentModel.setPaymentStatus("STATUS");
        srgPaymentModel.setRcCode("RC123");
        srgPaymentModel.setComment("Comment");

        List<SrgPaymentModel> srgPaymentModels = Arrays.asList(srgPaymentModel);

        // Access the private method using reflection
        Method findPaymentLinesMethod = CashAllocationDomain.class.getDeclaredMethod("findPaymentLinesFromPaymentReferences", String[].class);
        findPaymentLinesMethod.setAccessible(true); // Make it accessible

        // Invoke the private method
        List<SrgPaymentModel> privateResult = (List<SrgPaymentModel>) findPaymentLinesMethod.invoke(cashAllocationDomain, (Object) paymentReferences);

        when(cashAllocationDomain.getSsiDetails("PROVIDER123", "USD", "SGENTITY", "FEE")).thenReturn(Arrays.asList("SSI1", "SSI2"));

        // Act
        List<PaymentLinesModel> result = cashAllocationDomain.getPaymentLinesFromPaymentReference(paymentReferences);

        // Assert
        assertEquals(1, result.size());
        PaymentLinesModel paymentLinesModel = result.get(0);
        assertEquals(1L, paymentLinesModel.getId());
        assertEquals("BrokerA", paymentLinesModel.getBrokerName());
        assertEquals(2, paymentLinesModel.getNumberOfInvoices());
        assertEquals(Arrays.asList("SSI1", "SSI2"), paymentLinesModel.getSsiAccountCode());
        assertEquals(2, paymentLinesModel.getNumberOfSSI());
        assertEquals("SGENTITY", paymentLinesModel.getSgEntity());
        assertEquals("INV1,INV2", paymentLinesModel.getInvoiceReference());
        assertEquals("FEE", paymentLinesModel.getFeeCategory());
        assertEquals("PROVIDER123", paymentLinesModel.getProviderId());
        assertEquals("2023-10-27", paymentLinesModel.getValueDate());
        assertEquals("2023-10-26", paymentLinesModel.getSendingDate());
        assertEquals(100.0, paymentLinesModel.getAmount());
        assertEquals("USD", paymentLinesModel.getCurrency());
        assertEquals("TYPE", paymentLinesModel.getInvoiceType());
        assertEquals("INV", paymentLinesModel.getFeeType());
        assertEquals("CR", paymentLinesModel.getPaymentDirection());
        assertEquals("MODE", paymentLinesModel.getPaymentMode());
        assertEquals("STATUS", paymentLinesModel.getPaymentStatus());
        assertEquals("TYPE", paymentLinesModel.getPaymentType());
        assertEquals("RC123", paymentLinesModel.getRc());
        assertEquals("Comment", paymentLinesModel.getComment());
    }