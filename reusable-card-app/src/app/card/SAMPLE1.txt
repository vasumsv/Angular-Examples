
    @Test
    void getNettedPaymentRowsForManualPayment_ValidData_ReturnsPaymentLinesModel() {
        // Arrange
        List<InvoicePayableModelForPayment> paymentList = new ArrayList<>();
        // Add dummy data with invoiceType set to avoid NullPointerException
        InvoicePayableModelForPayment invoice1 = new InvoicePayableModelForPayment();
        invoice1.setInvoiceType("INVOICE"); // Set a non-null invoiceType
        InvoicePayableModelForPayment invoice2 = new InvoicePayableModelForPayment();
        invoice2.setInvoiceType("CREDIT_NOTE"); // Set a non-null invoiceType
        paymentList.add(invoice1);
        paymentList.add(invoice2);

        Map<GroupingKey, BigDecimal> aggregateAmount = new HashMap<>();
        GroupingKey groupingKey = new GroupingKey("entity1", "USD");
        aggregateAmount.put(groupingKey, new BigDecimal("100"));

        Map<GroupingKey, Integer> aggregateInvoiceCount = new HashMap<>();
        aggregateInvoiceCount.put(groupingKey, 2);

        Map<GroupingKey, String> aggregateInvoiceReferences = new HashMap<>();
        aggregateInvoiceReferences.put(groupingKey, "INV1,INV2,");

        when(referentialServiceApi.getPaymentDates(anyString(), anyString(), anyString(), anyString(), anyString(), anyString()))
                .thenReturn(new PaymentDates("2023-10-26", "2023-10-27"));

        when(invoiceServiceApi.getListOfBapDetailsForMultipleInvoices(anyList()))
                .thenReturn(Arrays.asList(new BapPayableModel("portfolio1"), new BapPayableModel("portfolio2")));

        when(referentialServiceApi.getPortfolioDetailsBasedOnMnemonic(anyString()))
                .thenReturn(new PortfolioAdvanceDetailResponse("BDR1"));

        when(referentialServiceApi.getSettlementAccounts(anyString(), anyString(), anyString()))
                .thenReturn(Arrays.asList(new SettlementsAccounts("account1"), new SettlementsAccounts("account2")));

        // Act
        List<PaymentLinesModel> result = cashAllocationDomain.getNettedPaymentRowsForManualPayment(paymentList, "user1");

        // Assert
        assertEquals(1, result.size());
        PaymentLinesModel paymentLinesModel = result.get(0);
        assertEquals("entity1", paymentLinesModel.getSgEntity());
        assertEquals("USD", paymentLinesModel.getCurrency());
        assertEquals(2, paymentLinesModel.getNumberOfSSI());
        assertEquals(new BigDecimal("100"), paymentLinesModel.getAmount());
    }