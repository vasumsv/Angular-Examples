@Test
void testGetRetiredRows_SuccessScenario() throws Exception {
    // Mock dependencies
    PaymentModeAndLocationModel mockMode = new PaymentModeAndLocationModel();
    mockMode.setPaymentMode("BANK_TRANSFER");
    
    PaymentDates mockDates = new PaymentDates();  // Changed from PaymentDate to PaymentDates
    mockDates.setValueDate(LocalDate.now());  // Changed LookDate to LocalDate

    when(referentialServiceApi.getPaymentModeAndSettlementLocation(  // Fixed method name
        any(BigInteger.class), 
        anyString(), 
        any(BigInteger.class), 
        any(BigInteger.class),
        anyString(), 
        anyString()))
        .thenReturn(mockMode);  // Fixed variable name
    
    when(referentialServiceApi.getPaymentDates(  // Fixed method name
        anyString(), 
        anyString(), 
        anyString(), 
        anyString(), 
        anyString(), 
        anyString()))
        .thenReturn(mockDates);

    // Execute
    List<PaymentLinesModel> result = cashAllocationDomain.getRetiredRows(paymentList, TEST_USER);

    // Verify
    assertFalse(result.isEmpty());
    PaymentLinesModel model = result.get(0);
    assertEquals("BANK_TRANSFER", model.getPaymentMode());
    assertNull(model.getComment());
}