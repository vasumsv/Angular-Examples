
    @Test
    void transferFile_FileNotFoundException_logsError() throws Exception {
        LocalDate date = LocalDate.now();
        List<CashAllocationModel> cashAllocationModelList = Collections.singletonList(cashAllocationModel);
        String filename = "testFile.txt";

        // Simulate FileNotFoundException in uploadPaymentAbFileViaReferential
        doThrow(new FileNotFoundException("File not found")).when(abDomain).uploadPaymentAbFileViaReferential(filename);

        // Execute the public method that internally calls transferFile
        abDomain.somePublicMethodThatCallsTransferFile(date, cashAllocationModelList); 

        // Verify that logger.error was called with the correct message and exception
        verify(logger).error(eq("File not found"), any(FileNotFoundException.class));
    }

    @Test
    void transferFile_IOException_logsError() throws Exception {
        LocalDate date = LocalDate.now();
        List<CashAllocationModel> cashAllocationModelList = Collections.singletonList(cashAllocationModel);
        String filename = "testFile.txt";

        // Simulate IOException in uploadPaymentAbFileViaReferential
        doThrow(new IOException("Exception while writing file")).when(abDomain).uploadPaymentAbFileViaReferential(filename);

        // Execute the public method that internally calls transferFile
        abDomain.somePublicMethodThatCallsTransferFile(date, cashAllocationModelList); 

        // Verify that logger.error was called with the correct message and exception
        verify(logger).error(eq("Exception while writing file"), any(IOException.class));
    }

    @Test
    void transferFile_RestClientException_logsError() throws Exception {
        LocalDate date = LocalDate.now();
        List<CashAllocationModel> cashAllocationModelList = Collections.singletonList(cashAllocationModel);
        String filename = "testFile.txt";

        // Simulate RestClientException in uploadPaymentAbFileViaReferential
        doThrow(new RestClientException("Failed to receive List of Invoice from InvoiceService")).when(abDomain).uploadPaymentAbFileViaReferential(filename);

        // Execute the public method that internally calls transferFile
        abDomain.somePublicMethodThatCallsTransferFile(date, cashAllocationModelList); 

        // Verify that logger.error was called with the correct message and exception
        verify(logger).error(eq("Failed to receive List of Invoice from InvoiceService"), any(RestClientException.class));
    }