 @Test
    void paymentDetailsByValueDate_ValidStartDate_ReturnsCashDetails() {
        // Arrange
        String validDate = "2023-10-01";
        LocalDate parsedDate = LocalDate.parse(validDate);
        CashAllocationModel mockModel = mock(CashAllocationModel.class);
        CashDetails mockDetails = mock(CashDetails.class);
        
        when(mockModel.getCashDetails()).thenReturn(mockDetails);
        when(cashAllocationRepositoryApi.findByValueDateGreaterThanEqual(parsedDate))
            .thenReturn(List.of(mockModel));

        // Act
        List<CashDetails> result = cashAllocationDomain
            .paymentDetailsByValueDate(validDate, null);

        // Assert
        assertEquals(1, result.size());
        verify(mockDetails).setId(mockModel.getId());
        verify(cashAllocationRepositoryApi).findByValueDateGreaterThanEqual(parsedDate);
        verify(logger).info("paymentDetails@CounterpartyId() ends");
    }

    @Test
    void paymentDetailsByValueDate_InvalidStartDate_ThrowsException() {
        // Arrange
        String invalidDate = "2023/10/01";

        // Act & Assert
        CashAllocationCustomException exception = assertThrows(
            CashAllocationCustomException.class,
            () -> cashAllocationDomain.paymentDetailsByValueDate(invalidDate, null)
        );
        
        assertEquals("Rate format must be yyyy==-0d", exception.getMessage());
        verifyNoInteractions(cashAllocationRepositoryApi);
    }