  @Test
    void updatePaymentLines_CoverageLines1467To1482_NoException() {
        // Arrange
        List<UpdatePaymentLines> finalDataForInsertion = new ArrayList<>();
        UpdatePaymentLines updatePaymentLines = new UpdatePaymentLines();
        updatePaymentLines.setPaymentReferences(new String[]{"PAYREF1"});
        finalDataForInsertion.add(updatePaymentLines);

        List<PaymentLinesFeoModel> paymentLinesFeoModelList = new ArrayList<>();
        PaymentLinesFeoModel paymentLinesFeoModel = new PaymentLinesFeoModel();
        paymentLinesFeoModel.setSendingDate(LocalDateTime.now());
        paymentLinesFeoModel.setValueDate(LocalDate.now());
        paymentLinesFeoModel.setEntityBdrId("ENTITY1");
        paymentLinesFeoModel.setFeeBdrId("FEE1");
        paymentLinesFeoModel.setCurrency("USD");
        paymentLinesFeoModel.setInvoiceType("INVOICE");
        paymentLinesFeoModel.setPaymentMode("MODE1");
        paymentLinesFeoModel.setProviderId("PROVIDER1");
        paymentLinesFeoModel.setSsi("SSI1");
        paymentLinesFeoModel.setPaymentType("A"); // Important: Set Payment Type to "A"
        paymentLinesFeoModel.setSsiDet("SSI_ACCOUNT"); // Set a specific SSI account number
        paymentLinesFeoModel.setPaymentReference("PAYREF1");
        paymentLinesFeoModel.setPaymentRequest(new PaymentRequest());
        paymentLinesFeoModel.setPaymentAmount(BigDecimal.valueOf(100));
        paymentLinesFeoModelList.add(paymentLinesFeoModel);

        List<PaymentEntity> paymentEntities = new ArrayList<>();
        PaymentEntity paymentEntity = new PaymentEntity();
        paymentEntity.setPaymentReference("PAYREF1");
        paymentEntities.add(paymentEntity);

        List<SrgPaymentModel> srgPaymentModels = new ArrayList<>();
        SrgPaymentModel srgPaymentModel = new SrgPaymentModel();
        srgPaymentModel.setPaymentReference("PAYREF1");
        srgPaymentModels.add(srgPaymentModel);

        PaymentModeModel paymentModeModel = new PaymentModeModel();
        paymentModeModel.setPaymentModeCode("MODE_CODE");

        SsiResponse ssiResponse = new SsiResponse();
        ssiResponse.setAccountNumber("SSI_ACCOUNT"); // Match ssiDet
        ssiResponse.setBankName("BANK1");
        ssiResponse.setSwiftCode("SWIFT1");
        List<SsiResponse> ssiResponseList = new ArrayList<>();
        ssiResponseList.add(ssiResponse);

        PaymentChecksResponse paymentChecksResponse = new PaymentChecksResponse();
        paymentChecksResponse.setPCodGuicBlcor("PCod");
        paymentChecksResponse.setPNumCptCor("PNum");

        when(srgMapper.mapNew(org.mockito.ArgumentMatchers.anyList())).thenReturn(paymentLinesFeoModelList);
        when(paymentRepository.getPaymentEntitiesByPaymentReference(anyString())).thenReturn(paymentEntities);
        when(srgMapper.map(org.mockito.ArgumentMatchers.anyList())).thenReturn(srgPaymentModels);
        when(referentialServiceApi.getPaymentModeDetails(anyString())).thenReturn(paymentModeModel);
        when(referentialServiceApi.getSsiDetails(anyString(), anyString(), anyString(), anyString())).thenReturn(ssiResponseList);
        when(referentialServiceApi.doPaymentChecks(anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), anyString())).thenReturn(paymentChecksResponse);

        // Act & Assert
        assertDoesNotThrow(() -> cashAllocationDomain.updatePaymentLines("user1", finalDataForInsertion));
    }