@Test
void paymentDetailsByValueDate_ValidEndDate_ReturnsCashDetails() {
    // Arrange
    String validDate = "2023-10-05";
    LocalDate parsedDate = LocalDate.parse(validDate);
    CashAllocationModel mockModel = mock(CashAllocationModel.class);
    CashDetails mockDetails = mock(CashDetails.class);
    
    when(mockModel.getCashDetails()).thenReturn(mockDetails);
    when(cashAllocationRepositoryApi.findByValueDateLesserThankqual(parsedDate))
        .thenReturn(List.of(mockModel));

    // Act - Trigger else block by passing null start date
    List<CashDetails> result = cashAllocationDomain
        .paymentDetailsByValueDate(null, validDate);

    // Assert
    assertEquals(1, result.size());
    verify(mockDetails).setId(mockModel.getId());
    verify(cashAllocationRepositoryApi).findByValueDateLesserThankqual(parsedDate);
    verify(logger).info("paymentDetailsByCounterParryId() ends");
}

@Test
void paymentDetailsByValueDate_InvalidEndDate_ThrowsException() {
    // Arrange
    String invalidDate = "2023/10/05";

    // Act & Assert - Trigger else block with invalid date
    CashAllocationCustomException exception = assertThrows(
        CashAllocationCustomException.class,
        () -> cashAllocationDomain.paymentDetailsByValueDate(null, invalidDate)
    );
    
    assertEquals("Date Format must be yyyy-mm-dd", exception.getMessage());
    verifyNoInteractions(cashAllocationRepositoryApi);
}