  @Test
    void testGetPaymentLinesFromPaymentReference_WithValidData() {
        // Mocking data
        SrgPaymentModel paymentModel = new SrgPaymentModel();
        paymentModel.setGetInvoiceReference("INV123;INV456");
        paymentModel.setGetProviderBdrId("BDR001");
        paymentModel.setGetPaymentCurrency("USD");
        paymentModel.setGetSgEntity("SG001");
        paymentModel.setGetFeeCategory("Category1");
        paymentModel.setGetComment("Sample Comment");

        List<SrgPaymentModel> mockPayments = Collections.singletonList(paymentModel);

        when(someDependency.findPaymentLinesFromPaymentReference(anyString()))
            .thenReturn(mockPayments);

        when(someDependency.getSsiDetails(anyString(), anyString(), anyString(), anyString()))
            .thenReturn(Arrays.asList("SSI123", "SSI456"));

        // Execute method
        List<PaymentLinesModel> result = cashAllocationDomain.getPaymentLinesFromPaymentReference("REF123");

        // Assertions
        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals("INV123", result.get(0).getInvoiceReference());
        assertEquals("BDR001", result.get(0).getProviderBdrId());
        assertEquals("USD", result.get(0).getPaymentCurrency());
        assertEquals("SG001", result.get(0).getSgEntity());
        assertEquals("Sample Comment", result.get(0).getComment());

        // Verify method calls
        verify(someDependency).findPaymentLinesFromPaymentReference("REF123");
        verify(someDependency).getSsiDetails(anyString(), anyString(), anyString(), anyString());
    }

    @Test
    void testGetPaymentLinesFromPaymentReference_WithEmptyList() {
        when(someDependency.findPaymentLinesFromPaymentReference(anyString()))
            .thenReturn(Collections.emptyList());

        List<PaymentLinesModel> result = cashAllocationDomain.getPaymentLinesFromPaymentReference("REF123");

        assertNotNull(result);
        assertTrue(result.isEmpty());
    }