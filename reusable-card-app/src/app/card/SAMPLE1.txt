
    @Test
    void insertPaymentLines_ProviderDetailsException() throws Exception {
        when(referentialServiceApi.getProviderDetails(any(), any())).thenThrow(new Exception("Provider details error"));

        InsertPaymentResponse response = cashAllocationDomain.insertPaymentLines(createPaymentLinesFeoModelList(), "testUser");

        assertEquals("MESSAGE", response.getStatus());
        assertEquals("Error occurred while getting provider details. Detailed message Provider details error", response.getErrorMessage());
    }

    @Test
    void insertPaymentLines_UserInitialsException() throws Exception {
        when(referentialServiceApi.getProviderDetails(any(), any())).thenReturn(new ProviderDetails());
        when(referentialServiceApi.getUserInitials("testUser")).thenThrow(new Exception("User initials error"));

        InsertPaymentResponse response = cashAllocationDomain.insertPaymentLines(createPaymentLinesFeoModelList(), "testUser");

        assertEquals("MESSAGE", response.getStatus());
        assertEquals("Error occurred while getting user initial details. Detailed message User initials error", response.getErrorMessage());
    }

    @Test
    void insertPaymentLines_EntityListException() throws Exception {
        when(referentialServiceApi.getProviderDetails(any(), any())).thenReturn(new ProviderDetails());
        when(referentialServiceApi.getUserInitials("testUser")).thenReturn(new UserDetailsModel());
        when(referentialServiceApi.getEntireListOfEntities()).thenThrow(new Exception("Entity list error"));

        InsertPaymentResponse response = cashAllocationDomain.insertPaymentLines(createPaymentLinesFeoModelList(), "testUser");

        assertEquals("MESSAGE", response.getStatus());
        assertEquals("Error occurred ahile getting entity details. Detailed message Entity list error", response.getErrorMessage());
    }

    @Test
    void insertPaymentLines_BackOfficeDetailsException() throws Exception {
        when(referentialServiceApi.getProviderDetails(any(), any())).thenReturn(new ProviderDetails());
        when(referentialServiceApi.getUserInitials("testUser")).thenReturn(new UserDetailsModel());
        when(referentialServiceApi.getEntireListOfEntities()).thenReturn(createEntityList());
        when(referentialServiceApi.getBackOfficeDetails(any(), any())).thenThrow(new Exception("Back office details error"));

        InsertPaymentResponse response = cashAllocationDomain.insertPaymentLines(createPaymentLinesFeoModelList(), "testUser");

        assertEquals("MESSAGE", response.getStatus());
        assertEquals("Error occurred while getting back office code. Detailed message Back office details error", response.getErrorMessage());
    }

    @Test
    void insertPaymentLines_Success() throws Exception {
        when(referentialServiceApi.getProviderDetails(any(), any())).thenReturn(new ProviderDetails());
        when(referentialServiceApi.getUserInitials("testUser")).thenReturn(new UserDetailsModel());
        when(referentialServiceApi.getEntireListOfEntities()).thenReturn(createEntityList());
        when(referentialServiceApi.getBackOfficeDetails(any(), any())).thenReturn(new BackOfficeDetails());

        InsertPaymentResponse response = cashAllocationDomain.insertPaymentLines(createPaymentLinesFeoModelList(), "testUser");

        assertNotNull(response);
    }

    // Helper methods (replace with actual data creation)
    private List<PaymentLinesFeoModel> createPaymentLinesFeoModelList() {
        List<PaymentLinesFeoModel> list = new ArrayList<>();
        PaymentLinesFeoModel model = new PaymentLinesFeoModel();
        model.setEntityBdrId("123"); // Replace with actual entityBdrId
        list.add(model);
        return list;
    }

    private List<Entity> createEntityList() {
        List<Entity> list = new ArrayList<>();
        Entity entity = new Entity();
        entity.setBdrId(new BigInteger("123")); // Replace with actual BigInteger
        entity.setEntityCode("CODE"); // Replace with actual entity code
        list.add(entity);
        return list;
    }