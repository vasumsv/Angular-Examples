    // Initialize responseEntity using reflection
        Field responseEntityField = SrgAckApiClient.class.getDeclaredField("responseEntity");
        responseEntityField.setAccessible(true);
        responseEntityField.set(srgAckApiClient, ResponseEntity.ok("Default Body"));
    }

    @Test
    void testSendingPmtRequest_Success() throws Exception {
        // Arrange
        SrgAckSentRequest request = new SrgAckSentRequest();
        SrgAckSentResponse expectedResponse = new SrgAckSentResponse(); // Assuming you have a dummy SrgAckSentResponse object

        when(srgAckClient.sendSrgAckRequest(request)).thenReturn(ResponseEntity.ok(expectedResponse));

        // Act
        Method method = SrgAckApiClient.class.getDeclaredMethod("sendingPmtRequest", SrgAckSentRequest.class);
        method.setAccessible(true);
        SrgAckSentResponse result = (SrgAckSentResponse) method.invoke(srgAckApiClient, request);

        // Assert
        assertNotNull(result);
    }

    @Test
    void testSendingPmtRequest_Exception() throws Exception {
        // Arrange
        SrgAckSentRequest request = new SrgAckSentRequest();

        when(srgAckClient.sendSrgAckRequest(request)).thenThrow(new RuntimeException("Test Exception"));

        // Act
        Method method = SrgAckApiClient.class.getDeclaredMethod("sendingPmtRequest", SrgAckSentRequest.class);
        method.setAccessible(true);
        SrgAckSentResponse result = (SrgAckSentResponse) method.invoke(srgAckApiClient, request);

        // Assert
        assertNotNull(result);
    }