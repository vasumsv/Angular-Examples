  @Test
    public void testTransferFile_FileNotFoundExceptionCaught() throws Exception {
        // Arrange
        LocalDate testDate = LocalDate.now();
        List<CashAllocationModel> testList = Collections.emptyList();
        String testFilename = "any_filename";

        // Mock the private method's behavior indirectly
        // We'll make the public method call throw the exception
        AbDomain abDomainSpy = spy(abDomain);
        doThrow(new FileNotFoundException("Test File Not Found")).when(abDomainSpy, "uploadPaymentAbFileViaReferential", anyString());

        // Act
        String result = abDomainSpy.transferFile(testDate, testList);

        // Assert
        // Verify that the logger.error for FileNotFoundException was called
        verify(logger).error(contains("File not found"), any(FileNotFoundException.class));
        // Optionally assert the return value of transferFile if it has a specific behavior on exception
        assertNull(result); // Assuming transferFile returns null or some error indicator on failure
    }

    @Test
    public void testTransferFile_IOExceptionCaught() throws Exception {
        // Arrange
        LocalDate testDate = LocalDate.now();
        List<CashAllocationModel> testList = Collections.emptyList();
        String testFilename = "another_filename";

        // Mock the private method's behavior indirectly
        AbDomain abDomainSpy = spy(abDomain);
        doThrow(new IOException("Test IO Exception")).when(abDomainSpy, "uploadPaymentAbFileViaReferential", anyString());

        // Act
        String result = abDomainSpy.transferFile(testDate, testList);

        // Assert
        // Verify that the logger.error for IOException was called
        verify(logger).error(contains("Exception while writing file"), any(IOException.class));
        // Optionally assert the return value
        assertNull(result);
    }