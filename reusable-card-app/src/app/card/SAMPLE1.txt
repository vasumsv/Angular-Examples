 @BeforeEach
    void setUp() throws NoSuchMethodException {
        MockitoAnnotations.openMocks(this);
        sendingPmtRequestMethod = YourClass.class.getDeclaredMethod("sendingPmtRequest", SrgAckSentRequest.class); // Replace YourClass with the actual class name
        sendingPmtRequestMethod.setAccessible(true);
    }

    @Test
    void sendingPmtRequest_success() throws Exception {
        SrgAckSentRequest inputJson = new SrgAckSentRequest();
        SrgAckSentResponse expectedResponse = new SrgAckSentResponse();

        when(srgAckApiClient.sendSrgAckRequest(inputJson)).thenReturn(expectedResponse);

        ResponseEntity<SrgAckSentResponse> responseEntity = new ResponseEntity<>(expectedResponse, HttpStatus.OK);
        when(srgAckApiClient.getResponse()).thenReturn(responseEntity);

        SrgAckSentResponse actualResponse = (SrgAckSentResponse) sendingPmtRequestMethod.invoke(yourClass, inputJson);

        assertEquals(expectedResponse, actualResponse);
        verify(srgAckApiClient, times(1)).sendSrgAckRequest(inputJson);
    }

    @Test
    void sendingPmtRequest_exception() throws Exception {
        SrgAckSentRequest inputJson = new SrgAckSentRequest();

        when(srgAckApiClient.sendSrgAckRequest(inputJson)).thenThrow(new RestClientException("Test Exception"));

        ResponseEntity<SrgAckSentResponse> responseEntity = new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
        when(srgAckApiClient.getResponse()).thenReturn(responseEntity);

        SrgAckSentResponse actualResponse = (SrgAckSentResponse) sendingPmtRequestMethod.invoke(yourClass, inputJson);

        assertEquals(responseEntity.getBody(), actualResponse);
        verify(srgAckApiClient, times(1)).sendSrgAckRequest(inputJson);
    }