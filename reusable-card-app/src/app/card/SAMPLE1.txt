 finalDataForInsertion = new ArrayList<>();
        PaymentLinesFeoModel model = new PaymentLinesFeoModel();
        model.setProviderId("provider123");
        model.setProviderMnemonic("mnemonic456");
        model.setEntityBdrId("789");
        finalDataForInsertion.add(model);
        responseForInsertion = new InsertPaymentResponse();
        user = "testUser";
    }

    @Test
    void testInsertPaymentLines_providerDetailsRuntimeException() {
        RuntimeException exception = new RuntimeException("Provider details error");
        when(referentialServiceApi.getProviderDetails(anyString(), anyString())).thenThrow(exception);
        InsertPaymentResponse response = cashAllocationDomain.insertPaymentLines(finalDataForInsertion, user);
        assertEquals(ERROR_STATUS, response.getStatus());
        assertEquals("Error occurred while getting provider details. Detailed message " + exception, response.getErrorMessage());
        verify(logger).error(anyString());
    }

    @Test
    void testInsertPaymentLines_userDetailsRuntimeException() {
        RuntimeException exception = new RuntimeException("User initials error");
        when(referentialServiceApi.getUserInitials(anyString())).thenThrow(exception);
        InsertPaymentResponse response = cashAllocationDomain.insertPaymentLines(finalDataForInsertion, user);
        assertEquals(ERROR_STATUS, response.getStatus());
        assertEquals("Error occurred while getting user initial details. Detailed message " + exception, response.getErrorMessage());
        verify(logger).error(anyString());
    }

    @Test
    void testInsertPaymentLines_entityListRuntimeException() {
        RuntimeException exception = new RuntimeException("Entity list error");
        when(referentialServiceApi.getEntirelistofEntities()).thenThrow(exception);
        InsertPaymentResponse response = cashAllocationDomain.insertPaymentLines(finalDataForInsertion, user);
        assertEquals(ERROR_STATUS, response.getStatus());
        assertEquals("Error occurred while getting entity details. Detailed message " + exception, response.getErrorMessage());
        verify(logger).error(anyString());
    }

    @Test
    void testInsertPaymentLines_backOfficeDetailsRuntimeException() {
        List<Entity> entityList = new ArrayList<>();
        Entity entity = new Entity();
        entity.setEntityCode("entityCode");
        entityList.add(entity);

        UserDetailsModel userDetailsModel = new UserDetailsModel();
        userDetailsModel.setCodgrphabbo("codgrphabbo");

        when(referentialServiceApi.getEntirelistofEntities()).thenReturn(entityList);
        when(referentialServiceApi.getUserInitials(anyString())).thenReturn(userDetailsModel);
        RuntimeException exception = new RuntimeException("Back office details error");
        when(referentialServiceApi.getBackOfficeDetails(anyString(), anyString())).thenThrow(exception);

        InsertPaymentResponse response = cashAllocationDomain.insertPaymentLines(finalDataForInsertion, user);
        assertEquals(ERROR_STATUS, response.getStatus());
        assertEquals("Error occurred while getting back office code. Detailed message " + exception, response.getErrorMessage());
        verify(logger).error(anyString());
    }

    @Test
    void testInsertPaymentLines_allSuccess() {
        List<Entity> entityList = new ArrayList<>();
        Entity entity = new Entity();
        entity.setEntityCode("entityCode");
        entityList.add(entity);

        UserDetailsModel userDetailsModel = new UserDetailsModel();
        userDetailsModel.setCodgrphabbo("codgrphabbo");

        when(referentialServiceApi.getProviderDetails(anyString(), anyString())).thenReturn(new ProviderDetails());
        when(referentialServiceApi.getUserInitials(anyString())).thenReturn(userDetailsModel);
        when(referentialServiceApi.getEntirelistofEntities()).thenReturn(entityList);
        when(referentialServiceApi.getBackOfficeDetails(anyString(), anyString())).thenReturn(new BackOfficeDetails());

        InsertPaymentResponse response = cashAllocationDomain.insertPaymentLines(finalDataForInsertion, user);
        assertNull(response.getErrorMessage());
    }