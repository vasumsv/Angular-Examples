      paymentList = new ArrayList<>();
        InvoicePayableModelForPayment payment = new InvoicePayableModelForPayment();
        
        // Mandatory fields
        payment.setInvoiceType("COMMERCIAL"); // Valid type for your domain
        payment.setInvoiceReferences("REF-2023-001");
        payment.setProviderId("456");
        payment.setFeeCategory("TEST_CAT");
        payment.setCurrency("USD");
        payment.setPaymentMethod("BANK_TRANSFER");
        
        paymentList.add(payment);
    }

    @Test
    void testGetRetiredRows_SuccessScenario() throws Exception {
        // Mocking setup
        PaymentModeAndLocationModel mockMode = new PaymentModeAndLocationModel();
        mockMode.setPaymentMode("BANK_TRANSFER");
        
        PaymentDates mockDates = new PaymentDates();
        mockDates.setValueDate(LocalDate.now());

        when(referentialServiceApi.getPaymentModeAndSettlementLocation(
            any(BigInteger.class), anyString(), any(BigInteger.class), 
            any(BigInteger.class), anyString(), anyString()))
            .thenReturn(mockMode);
        
        when(referentialServiceApi.getPaymentDates(
            anyString(), anyString(), anyString(), 
            anyString(), anyString(), anyString()))
            .thenReturn(mockDates);

        // Execution
        List<PaymentLinesModel> result = cashAllocationDomain.getRetiredRows(paymentList, TEST_USER);

        // Assertions
        assertFalse(result.isEmpty());
        assertEquals("BANK_TRANSFER", result.get(0).getPaymentMode());
    }