  @Test
    public void testGetPaymentLinesFromPaymentReference_DirtyTest_ForceCoverage() {
        // Arrange
        String[] paymentReferences = {"REF1"}; // Single reference to simplify

        // Mock data - Create a model that might lead to SSI details being fetched
        List<CashAllocationModel> paymentLines = new ArrayList<>();
        CashAllocationModel paymentModel1 = CashAllocationModel.builder()
                .id(UUID.randomUUID())
                .counterPartyId("CP1")
                .accountNumber("ACCT1")
                .currency("USD")
                .amount(BigDecimal.valueOf(100.0))
                .supllimentary("SUP1")
                .invoiceReferenceReceived("INV_WITH_MULTIPLE,REFS") // Might trigger SSI logic
                .invoiceMatched("MATCHED1")
                .status("STATUS1")
                .valueDate(LocalDate.now())
                .paymentDate(LocalDate.now().minusDays(1))
                .version(1)
                .actionPerformedBy("USER1")
                .build();
        paymentLines.add(paymentModel1);

        // Mock repository - Ensure it returns something
        when(cashAllocationRepositoryApi.findPaymentLinesForAutoMatching(any(List.class), any(List.class), any(String.class), any(LocalDate.class)))
                .thenReturn(paymentLines);

        // Mock getSsiDetails - Now it should be called if invoiceReference has commas
        List<String> ssiDetails = new ArrayList<>();
        ssiDetails.add("SSI1");
        when(cashAllocationDomain.getSsiDetails(any(String.class), any(String.class), any(String.class), any(String.class)))
                .thenReturn(ssiDetails);

        // Act
        cashAllocationDomain.getPaymentLinesFromPaymentReference(paymentReferences);

        // No assertions, just aiming for line coverage
    }