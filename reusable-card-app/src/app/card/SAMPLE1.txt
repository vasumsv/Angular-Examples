   @Test
    public void testAutoPaymentMatching_DateFormatException() throws Exception {
        // Create a mock instance of CashAllocationRepositoryApi
        CashAllocationRepositoryApi mockRepository = Mockito.mock(CashAllocationRepositoryApi.class);

        // Create an instance of CashAllocationDomain
        CashAllocationDomain cashAllocationDomain = new CashAllocationDomain();

        try {
            // Use reflection to access and set the cashAllocationRepositoryApi field
            Field repositoryField = CashAllocationDomain.class.getDeclaredField("cashAllocationRepositoryApi");
            repositoryField.setAccessible(true); // Allow access to private fields
            repositoryField.set(cashAllocationDomain, mockRepository);
        } catch (NoSuchFieldException | IllegalAccessException e) {
            throw new RuntimeException("Failed to inject mock repository using reflection", e);
        }

        // Now, when autoPaymentMatching() is called, it will use the mockRepository
        // You still need to trigger the exception within the try block (lines 793-798)
        // for the catch block (lines 799-800) to be executed.

        // How you trigger the exception depends on the logic in the try block.
        // For example, if it depends on the system date, you might need to
        // find a way to influence that indirectly (though this is harder without code modification).

        assertThrows(CashAllocationCustomException.class, () -> {
            cashAllocationDomain.autoPaymentMatching();
        });

        // Optionally assert the exception message if needed
    }