    @Test
    void getNettedRows_ValidPaymentList_CallsFetchNettedRowsAndSetsFeeCode() {
        // Arrange
        List<InvoicePayableModelForPayment> paymentList = new ArrayList<>();
        InvoicePayableModelForPayment invoice = new InvoicePayableModelForPayment();
        invoice.setInvoiceReference("ABC123DEF");
        paymentList.add(invoice);

        // Mock the fetchNettedRows method to avoid actual logic execution
        doNothing().when(cashAllocationDomain).fetchNettedRows(anyList(), anyMap(), anyMap(), anyMap());

        // Act
        cashAllocationDomain.getNettedRows(paymentList, "user1");

        // Assert
        // Verify that fetchNettedRows was called with the correct parameters
        verify(cashAllocationDomain, times(1)).fetchNettedRows(eq(paymentList), anyMap(), anyMap(), anyMap());

        // You can add more assertions if needed, for example, to check the feeCode
        // if it is used later in the method.
    }

    @Test
    void getNettedRows_EmptyPaymentList_DoesNotThrowException() {
        // Arrange
        List<InvoicePayableModelForPayment> paymentList = new ArrayList<>();

        // Mock the fetchNettedRows method to avoid actual logic execution
        doNothing().when(cashAllocationDomain).fetchNettedRows(anyList(), anyMap(), anyMap(), anyMap());

        // Act
        cashAllocationDomain.getNettedRows(paymentList, "user1");

        // Assert
        // Verify that fetchNettedRows was called with the correct parameters
        verify(cashAllocationDomain, times(1)).fetchNettedRows(eq(paymentList), anyMap(), anyMap(), anyMap());
    }

    @Test
    void getNettedRows_NullInvoiceReference_DoesNotThrowException() {
        // Arrange
        List<InvoicePayableModelForPayment> paymentList = new ArrayList<>();
        InvoicePayableModelForPayment invoice = new InvoicePayableModelForPayment();
        invoice.setInvoiceReference(null);
        paymentList.add(invoice);

        // Mock the fetchNettedRows method to avoid actual logic execution
        doNothing().when(cashAllocationDomain).fetchNettedRows(anyList(), anyMap(), anyMap(), anyMap());

        // Act
        cashAllocationDomain.getNettedRows(paymentList, "user1");

        // Assert
        // Verify that fetchNettedRows was called with the correct parameters
        verify(cashAllocationDomain, times(1)).fetchNettedRows(eq(paymentList), anyMap(), anyMap(), anyMap());
    }