@Test
    void testUpdateCashAllocationStatus_UNMATCHED_Flow() throws Exception {
        // Create test data
        ProcessCashRequest processCashRequest = new ProcessCashRequest();
        processCashRequest.setInvoiceRefs(Arrays.asList("RSF-123", "RSF-456")); // Invoice refs start with "RSF-*"
        processCashRequest.setPaymentIds(Collections.singletonList(UUID.randomUUID().toString()));

        // Mock invoiceServiceApi.getInvoiceAb
        InvoicesAbList invoicesAbList = new InvoicesAbList();
        List<InvoiceAb> invoiceAbList = new ArrayList<>();
        InvoiceAb invoiceAb = new InvoiceAb(); // Populate with data if needed
        invoiceAbList.add(invoiceAb);
        invoicesAbList.setInvoicesAb(invoiceAbList);

        when(invoiceServiceApi.getInvoiceAb(anyString())).thenReturn(invoicesAbList);

        // Mock cashAllocationRepositoryApi.findByInvoiceMatched
        List<CashAllocationModel> cashAllocationModelList = new ArrayList<>();
        CashAllocationModel cashAllocationModel = new CashAllocationModel();
        cashAllocationModel.setInvoiceMatched("RSF-123,RSF-456"); // Set invoiceMatched to match the input
        CashDetails cashDetails = new CashDetails();
        cashAllocationModel.setCashDetails(cashDetails);
        cashAllocationModelList.add(cashAllocationModel);

        when(cashAllocationRepositoryApi.findByInvoiceMatched("RSF-123,RSF-456")).thenReturn(cashAllocationModelList); // Pass a single String

        // Execute the method
        cashAllocationDomain.updateCashAllocationStatus("UNMATCHED", processCashRequest, "TEST_USER");

        // Verify that cashAllocationRepositoryApi.save is called
        verify(cashAllocationRepositoryApi, times(1)).save(any(CashAllocationModel.class));
    }
}