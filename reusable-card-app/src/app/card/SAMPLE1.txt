
    @Mock
    private PaymentRepository paymentRepository;

    @Mock
    private SrgAckApiClient srgAckClient; // Mock for sendPetRequest

    @Mock
    private InvoiceServiceApi invoiceServiceApi;

    @InjectMocks
    private SrgAckApiClient srgAckApiClient;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testFetchAckDetails_Success() {
        // Arrange
        LocalDate today = LocalDate.now();
        List<PaymentLineDetailsForInvoice> paymentDetails = new ArrayList<>();
        PaymentLineDetailsForInvoice paymentDetail = new PaymentLineDetailsForInvoice();
        SrgPaymentRequest srgPaymentRequest = new SrgPaymentRequest();
        srgPaymentRequest.setPaymentReference("ref123");
        paymentDetail.setSrgPaymentRequest(srgPaymentRequest);
        paymentDetails.add(paymentDetail);

        SrgAckResponseModel responseModel = new SrgAckResponseModel();
        SrgAckResponseModel.Data data = new SrgAckResponseModel.Data();
        data.setFlowStatus("ACCEPTED");
        responseModel.setData(List.of(data));

        when(paymentRepository.getPaymentLinesForToday(today)).thenReturn(paymentDetails);
        when(srgAckClient.sendPetRequest(any(String.class))).thenReturn(ResponseEntity.ok(responseModel));

        // Act
        srgAckApiClient.fetchAckDetails();

        // Assert
        verify(paymentRepository, times(1)).updateCommentsAndFlowStatus(any(PaymentLineDetailsForInvoice.class));
        assertEquals("ACCEPTED", paymentDetail.getAckStatus());
    }

    @Test
    void testFetchAckDetails_ExceptionInSendPetRequest() {
        // Arrange
        LocalDate today = LocalDate.now();
        List<PaymentLineDetailsForInvoice> paymentDetails = new ArrayList<>();
        PaymentLineDetailsForInvoice paymentDetail = new PaymentLineDetailsForInvoice();
        SrgPaymentRequest srgPaymentRequest = new SrgPaymentRequest();
        srgPaymentRequest.setPaymentReference("ref123");
        paymentDetail.setSrgPaymentRequest(srgPaymentRequest);
        paymentDetails.add(paymentDetail);

        when(paymentRepository.getPaymentLinesForToday(today)).thenReturn(paymentDetails);
        when(srgAckClient.sendPetRequest(any(String.class))).thenThrow(new RuntimeException("Test Exception"));

        // Act
        srgAckApiClient.fetchAckDetails();

        // Assert
        verify(paymentRepository, never()).updateCommentsAndFlowStatus(any(PaymentLineDetailsForInvoice.class));
    }

    @Test
    void testFetchAckDetails_ExceptionInUpdateCommentsAndFlowStatus() {
        // Arrange
        LocalDate today = LocalDate.now();
        List<PaymentLineDetailsForInvoice> paymentDetails = new ArrayList<>();
        PaymentLineDetailsForInvoice paymentDetail = new PaymentLineDetailsForInvoice();
        SrgPaymentRequest srgPaymentRequest = new SrgPaymentRequest();
        srgPaymentRequest.setPaymentReference("ref123");
        paymentDetail.setSrgPaymentRequest(srgPaymentRequest);
        paymentDetails.add(paymentDetail);

        SrgAckResponseModel responseModel = new SrgAckResponseModel();
        SrgAckResponseModel.Data data = new SrgAckResponseModel.Data();
        data.setFlowStatus("ACCEPTED");
        responseModel.setData(List.of(data));

        when(paymentRepository.getPaymentLinesForToday(today)).thenReturn(paymentDetails);
        when(srgAckClient.sendPetRequest(any(String.class))).thenReturn(ResponseEntity.ok(responseModel));
        doThrow(new RuntimeException("Update Exception")).when(paymentRepository).updateCommentsAndFlowStatus(any(PaymentLineDetailsForInvoice.class));

        // Act
        srgAckApiClient.fetchAckDetails();

        // Assert
        verify(paymentRepository, times(1)).updateCommentsAndFlowStatus(any(PaymentLineDetailsForInvoice.class));
    }

    @Test
    void testFetchAckDetails_EmptyPaymentDetails() {
        // Arrange
        LocalDate today = LocalDate.now();
        List<PaymentLineDetailsForInvoice> paymentDetails = new ArrayList<>();

        when(paymentRepository.getPaymentLinesForToday(today)).thenReturn(paymentDetails);

        // Act
        srgAckApiClient.fetchAckDetails();

        // Assert
        verify(paymentRepository, never()).updateCommentsAndFlowStatus(any(PaymentLineDetailsForInvoice.class));
    }

    @Test
    void testFetchAckDetails_NullResponse() {
        // Arrange
        LocalDate today = LocalDate.now();
        List<PaymentLineDetailsForInvoice> paymentDetails = new ArrayList<>();
        PaymentLineDetailsForInvoice paymentDetail = new PaymentLineDetailsForInvoice();
        SrgPaymentRequest srgPaymentRequest = new SrgPaymentRequest();
        srgPaymentRequest.setPaymentReference("ref123");
        paymentDetail.setSrgPaymentRequest(srgPaymentRequest);
        paymentDetails.add(paymentDetail);

        when(paymentRepository.getPaymentLinesForToday(today)).thenReturn(paymentDetails);
        when(srgAckClient.sendPetRequest(any(String.class))).thenReturn(ResponseEntity.ok(null));

        // Act
        srgAckApiClient.fetchAckDetails();

        // Assert
        verify(paymentRepository, never()).updateCommentsAndFlowStatus(any(PaymentLineDetailsForInvoice.class));
    }

    @Test
    void testFetchAckDetails_EmptyDataInResponse() {
        // Arrange
        LocalDate today = LocalDate.now();
        List<PaymentLineDetailsForInvoice> paymentDetails = new ArrayList<>();
        PaymentLineDetailsForInvoice paymentDetail = new PaymentLineDetailsForInvoice();
        SrgPaymentRequest srgPaymentRequest = new SrgPaymentRequest();
        srgPaymentRequest.setPaymentReference("ref123");
        paymentDetail.setSrgPaymentRequest(srgPaymentRequest);
        paymentDetails.add(paymentDetail);

        SrgAckResponseModel responseModel = new SrgAckResponseModel();
        responseModel.setData(new ArrayList<>());

        when(paymentRepository.getPaymentLinesForToday(today)).thenReturn(paymentDetails);
        when(srgAckClient.sendPetRequest(any(String.class))).thenReturn(ResponseEntity.ok(responseModel));

        // Act
        srgAckApiClient.fetchAckDetails();

        // Assert
        verify(paymentRepository, never()).updateCommentsAndFlowStatus(any(PaymentLineDetailsForInvoice.class));
    }