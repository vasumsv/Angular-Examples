   @Test
    public void testAutoPaymentMatching_DateFormatException() {
        CashAllocationDomain cashAllocationDomain = new CashAllocationDomain();

        // Simulate an exception being thrown during date calculation
        // (This might require mocking or reflection, depending on your setup)
        // For simplicity, let's assume we can force an exception by setting a specific date
        // that causes an issue in the date calculation logic within the try block.

        // Example: If your logic relies on system date, you might need to mock LocalDate.now()
        // to return a date that triggers the exception.
        // For demonstration, let's assume we can set a date that causes an exception.

        // You'll need to adjust this part based on how you can actually trigger the exception
        // in your specific code.
        // If you can't easily trigger the exception, you might need to refactor the code
        // to make it more testable.

        // Assuming you have a way to set the date that causes the exception:
        // LocalDate problematicDate = ...; // Set the problematic date
        // cashAllocationDomain.setDateForTesting(problematicDate); // Method to set date for testing

        // Now, call the method that should throw the exception
        assertThrows(CashAllocationCustomException.class, () -> {
            cashAllocationDomain.autoPaymentMatching();
        });

        // Optionally, you can assert the exception message:
        // CashAllocationCustomException exception = assertThrows(CashAllocationCustomException.class, () -> {
        //     cashAllocationDomain.autoPaymentMatching();
        // });
        // assertEquals("DATEFORMATSTRING", exception.getMessage()); // Assuming "DATEFORMATSTRING" is the expected message
    }