@Test
void updatePaymentLines_Success() {
    String user = "testUser";
    List<UpdatePaymentLines> finalDataForInsertion = new ArrayList<>();

    // Create a sample UpdatePaymentLines object and add it to the list
    UpdatePaymentLines updatePaymentLines = new UpdatePaymentLines();
    // Set necessary properties of updatePaymentLines (e.g., paymentRef, etc.)
    finalDataForInsertion.add(updatePaymentLines);

    // Mock the repository save method (if needed)
    when(cashAllocationRepositoryApi.save(any())).thenReturn(null);

    // Mock the InvoiceServiceApi to return a non-null value for getListOfInvoices
    when(invoiceServiceApi.getListOfInvoices(any())).thenReturn(createInvoicePayableModelList());

    // Mock the SrgMapper to return a non-null list of PaymentLinesFeoModel
    when(srgMapper.mapNew(any())).thenReturn(createPopulatedPaymentLinesFeoModelList());

    String result = cashAllocationDomain.updatePaymentLines(user, finalDataForInsertion);

    assertEquals("SUCCESSFUL", result);
    verify(invoiceServiceApi, times(1)).sendPaymentDetailsToInvoiceService(any());
}

// Helper method to create a sample InvoicePayableModel list
private List<InvoicePayableModel> createInvoicePayableModelList() {
    List<InvoicePayableModel> invoicePayableModels = new ArrayList<>();
    // Populate the list with sample InvoicePayableModel objects
    return invoicePayableModels;
}

// Helper method to create a populated PaymentLinesFeoModel list
private List<PaymentLinesFeoModel> createPopulatedPaymentLinesFeoModelList() {
    List<PaymentLinesFeoModel> paymentLinesFeoModels = new ArrayList<>();
    // Add at least one PaymentLinesFeoModel object with necessary data
    PaymentLinesFeoModel paymentLinesFeoModel = new PaymentLinesFeoModel();
    // Set necessary properties of paymentLinesFeoModel to prevent NullPointerException
    paymentLinesFeoModel.setId(UUID.randomUUID());
    paymentLinesFeoModel.setProviderMnemonic("PROVIDER");
    paymentLinesFeoModel.setProviderId("PROVIDER_ID");
    paymentLinesFeoModel.setInvoiceReference("INVOICE_REF");
    paymentLinesFeoModel.setEntityBdrId("ENTITY_BDR_ID");
    paymentLinesFeoModel.setFeeType("FEE_TYPE");
    paymentLinesFeoModel.setFeeBdrId("FEE_BDR_ID");
    paymentLinesFeoModel.setValueDate(LocalDate.now());
    paymentLinesFeoModel.setSendingDate(LocalDate.now());
    paymentLinesFeoModel.setSsi("SSI");
    paymentLinesFeoModel.setAmount(100.0);
    paymentLinesFeoModel.setCurrency("USD");
    paymentLinesFeoModel.setInvoiceType("INVOICE_TYPE");
    paymentLinesFeoModel.setPaymentMode("PAYMENT_MODE");
    paymentLinesFeoModel.setPaymentStatus("PAYMENT_STATUS");
    paymentLinesFeoModel.setPaymentType("PAYMENT_TYPE");
    paymentLinesFeoModel.setRc("RC");
    paymentLinesFeoModel.setRefCptyId("REF_CPTY_ID");
    paymentLinesFeoModel.setComment("COMMENT");
    paymentLinesFeoModels.add(paymentLinesFeoModel);
    return paymentLinesFeoModels;
}