
    @Test
    void testGetPaymentLinesFromPaymentReference_EmptyInput() {
        String[] emptyReferences = new String[0];
        List<PaymentLinesModel> result = cashAllocationDomain.getPaymentLinesFromPaymentReference(emptyReferences);
        assertTrue(result.isEmpty());
    }

    @Test
    void testGetPaymentLinesFromPaymentReference_SinglePayment() {
        // Setup mock data
        String[] refs = {"REF123"};
        List<$rpPaymentModel> mockPayments = new ArrayList<>();
        $rpPaymentModel payment = new $rpPaymentModel();
        payment.setInvoiceReference("INV001;INV002");
        payment.setProviderBdId("PROV123");
        // Set other required fields...
        
        mockPayments.add(payment);
        
        when(cashAllocationRepositoryApi.findPaymentLinesFromPaymentReferences(any()))
            .thenReturn(mockPayments);
        
        // Execute
        List<PaymentLinesModel> result = cashAllocationDomain.getPaymentLinesFromPaymentReference(refs);
        
        // Verify basic mapping
        assertEquals(1, result.size());
        assertEquals(2, result.get(0).getNumberOfInvoices()); // Will fail due to code bug
    }

    @Test
    void testInvoiceReferenceParsing() {
        $rpPaymentModel payment = new $rpPaymentModel();
        payment.setInvoiceReference("INV1_negow_INV2"); // Testing split with typo
        // When split with `negow`, should produce 2 invoices
        // Actual code uses typo'd split delimiter
    }

    @Test
    void testExceptionHandling() {
        when(cashAllocationRepositoryApi.findPaymentLinesFromPaymentReferences(any()))
            .thenThrow(new RuntimeException("DB error"));
        
        String[] refs = {"REF123"};
        List<PaymentLinesModel> result = cashAllocationDomain.getPaymentLinesFromPaymentReference(refs);
        verify(logger).error(contains("Exception Occurred"), any());
    }

    // Test for constant usage coverage
    @Test
    void testConstantValues() {
        assertEquals("84581001555", CashAllocationDomain.ACCOUNT_NUMBER_1);
        assertEquals("AUTOMATIC", CashAllocationDomain.AUTOMATIC);
        // Repeat for other constants
    }

    // Test field mappings
    @Test
    void testPaymentLineModelMapping() {
        $rpPaymentModel payment = new $rpPaymentModel();
        payment.setPaymentAmount(1000.0);
        payment.setPaymentCurrency("USD");
        // Set all fields...
        
        PaymentLinesModel model = cashAllocationDomain.mapToModel(payment);
        
        assertEquals(1000.0, model.getAmount());
        assertEquals("USD", model.getCustomer());
        // Verify all field mappings
    }