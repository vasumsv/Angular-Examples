 @Test
    public void testUpdatePaymentLines() {
        // Arrange
        String user = "testUser";
        List<UpdatePaymentLines> finalDataForInsertion = new ArrayList<>();
        UpdatePaymentLines updatePaymentLines = new UpdatePaymentLines();
        String[] paymentReferences = {"ref1", "ref2"};
        updatePaymentLines.setPaymentReferences(paymentReferences);
        finalDataForInsertion.add(updatePaymentLines);

        List<PaymentLinesFeoModel> paymentLinesFeoModelList = new ArrayList<>();
        PaymentLinesFeoModel feoModel = new PaymentLinesFeoModel();
        feoModel.setSendingDate(LocalDate.now());
        feoModel.setEntityBdrId("entity123");
        feoModel.setFeeBdrId("fee456");
        feoModel.setCurrency("USD");
        feoModel.setInvoiceType("INV");
        feoModel.setPaymentMode("MODE1");
        feoModel.setProviderId("provider789");
        feoModel.setValueDate(LocalDate.now());
        feoModel.setSsi("SSI1");
        feoModel.setPaymentType("A");
        paymentLinesFeoModelList.add(feoModel);

        List<SrgPaymentModel> srgPaymentModels = new ArrayList<>();
        SrgPaymentModel srgPaymentModel = new SrgPaymentModel();
        srgPaymentModel.setPaymentReference("ref1");
        srgPaymentModel.setProviderBdrId("provider789");
        srgPaymentModel.setPaymentCurrency("USD");
        srgPaymentModel.setSgEntity("SG1");
        srgPaymentModel.setFeeCategory("CAT1");
        srgPaymentModels.add(srgPaymentModel);

        when(srgMapper.mapNew(finalDataForInsertion)).thenReturn(paymentLinesFeoModelList);
        when(paymentRepository.getPaymentEntitiesByPaymentReference("ref1")).thenReturn(List.of(srgPaymentModel));
        when(paymentRepository.getPaymentEntitiesByPaymentReference("ref2")).thenReturn(List.of(srgPaymentModel));
        when(referentialServiceApi.getAccountDetailsFromBdrForPayment(anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), anyString()))
                .thenReturn(new TrglbdrResponse());
        when(referentialServiceApi.getUserInitials(user)).thenReturn(new UserDetailsModel("test"));
        when(referentialServiceApi.getPaymentModeDetails(anyString())).thenReturn(new PaymentModeModel());
        when(referentialServiceApi.getSsiDetails(anyString(), anyString(), anyString(), anyString())).thenReturn(List.of(new SsiResponse()));

        // Act
        String result = cashAllocationDomain.updatePaymentLines(user, finalDataForInsertion);

        // Assert
        assertEquals("Success", result); // Assuming the method returns "Success" on successful execution
        verify(paymentRepository, times(2)).getPaymentEntitiesByPaymentReference(anyString());
        verify(referentialServiceApi, times(2)).getAccountDetailsFromBdrForPayment(anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), anyString());
        verify(referentialServiceApi, times(2)).getUserInitials(user);
        verify(referentialServiceApi, times(2)).getPaymentModeDetails(anyString());
        verify(referentialServiceApi, times(2)).getSsiDetails(anyString(), anyString(), anyString(), anyString());
    }