 @Test
    void testUpdatePaymentLines_Success() {
        // Setup test data
        String user = "testUser";
        List<UpdatePaymentLines> finalDataForInsertion = new ArrayList<>();

        // Create a sample UpdatePaymentLines object and add it to the list
        UpdatePaymentLines samplePaymentLine = new UpdatePaymentLines();
        samplePaymentLine.setInvoiceReference("INV123");
        samplePaymentLine.setSendingDate(LocalDate.of(2023, 10, 27));
        samplePaymentLine.setAmount(100.0);
        samplePaymentLine.setPaymentReferences(new String[]{"REF123-1", "REF123-2"}); // Set paymentReferences

        finalDataForInsertion.add(samplePaymentLine);

        // Mock paymentRepository
        List<SrgPaymentModel> srgPaymentModels = new ArrayList<>();
        // Add sample SrgPaymentModel objects to the list
        srgPaymentModels.add(new SrgPaymentModel()); // Add at least one mock object

        OngoingStubbing<List<SrgPaymentModel>> when1 = when(paymentRepository.getPaymentEntitiesByPaymentReference("REF123-1"));
        when1.thenReturn(srgPaymentModels);

        OngoingStubbing<List<SrgPaymentModel>> when2 = when(paymentRepository.getPaymentEntitiesByPaymentReference("REF123-2"));
        when2.thenReturn(srgPaymentModels);

        // Mock invoiceServiceApi behavior
        when(invoiceServiceApi.sendPaymentDetailsToInvoiceService(any())).thenReturn(null);

        // Execute the method
        String result = cashAllocationDomain.updatePaymentLines(user, finalDataForInsertion);

        // Verify the result
        assertEquals("SUCCESSFUL", result);

        // Verify interactions
        verify(invoiceServiceApi, times(1)).sendPaymentDetailsToInvoiceService(any());
    }