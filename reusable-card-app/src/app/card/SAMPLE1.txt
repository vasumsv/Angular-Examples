
    @Test
    void fetchNettedRows_ValidPaymentList_ProcessesDataCorrectly() throws Exception {
        // Arrange
        List<InvoicePayableModelForPayment> paymentList = new ArrayList<>();
        InvoicePayableModelForPayment invoice = new InvoicePayableModelForPayment();
        invoice.setInvoiceReference("ABC123DEF");
        invoice.setInvoiceType("INVOICE"); // Set the invoiceType here
        paymentList.add(invoice);

        Map<GroupingKey, BigDecimal> aggregateAmount = new ConcurrentHashMap<>();
        Map<GroupingKey, Integer> aggregateInvoiceCount = new ConcurrentHashMap<>();
        Map<GroupingKey, String> aggregateInvoiceReferences = new ConcurrentHashMap<>();

        // Use reflection to access the private method
        Method method = CashAllocationDomain.class.getDeclaredMethod("fetchNettedRows", List.class, Map.class, Map.class, Map.class);
        method.setAccessible(true); // Make the private method accessible

        // Act
        method.invoke(cashAllocationDomain, paymentList, aggregateAmount, aggregateInvoiceCount, aggregateInvoiceReferences);

        // Assert
        // Add assertions based on the expected behavior of fetchNettedRows
        // For example, if it populates the maps, you can assert their contents
        assertNotNull(aggregateAmount);
        assertNotNull(aggregateInvoiceCount);
        assertNotNull(aggregateInvoiceReferences);
    }
