   @Test
    void testUpdateCashAllocationStatus_UNMATCHED_Flow_NonRSF() throws Exception {
        // Create test data
        ProcessCashRequest processCashRequest = new ProcessCashRequest();
        processCashRequest.setInvoiceRefs(Arrays.asList("NONRSF-123", "NONRSF-456")); // Invoice refs do not start with "RSF-*"
        processCashRequest.setPaymentIds(Collections.singletonList(UUID.randomUUID().toString()));

        // Mock invoiceServiceApi.getFnsInvoice
        FnsInvoicesList fnsInvoicesList = new FnsInvoicesList();
        List<Invoice> invoices = new ArrayList<>();
        Invoice invoice = new Invoice(); // Populate with data if needed
        invoices.add(invoice);
        fnsInvoicesList.setInvoices(invoices);

        when(invoiceServiceApi.getFnsInvoice(anyString())).thenReturn(fnsInvoicesList);

        // Mock cashAllocationRepositoryApi.findByInvoiceMatched
        List<CashAllocationModel> cashAllocationModelList = new ArrayList<>();
        CashAllocationModel cashAllocationModel = new CashAllocationModel();
        cashAllocationModel.setInvoiceMatched("NONRSF-123,NONRSF-456"); // Set invoiceMatched to match the input
        cashAllocationModel.setMsgType(MSG_TYPE);
        CashDetails cashDetails = new CashDetails();
        cashAllocationModel.setCashDetails(cashDetails);
        cashAllocationModelList.add(cashAllocationModel);

        when(cashAllocationRepositoryApi.findByInvoiceMatched("NONRSF-123,NONRSF-456")).thenReturn(cashAllocationModelList); // Pass a single String

        // Execute the method
        cashAllocationDomain.updateCashAllocationStatus("UNMATCHED", processCashRequest, "TEST_USER");

        // Verify that cashAllocationRepositoryApi.save is called with the modified CashAllocationModel
        verify(cashAllocationRepositoryApi, times(1)).save(any(CashAllocationModel.class));
    }