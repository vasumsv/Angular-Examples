 @Test
    void getPaymentLinesFromPaymentReference_shouldReturnPaymentLinesModelList() {
        // Arrange
        String[] paymentReferences = {"REF1", "REF2"};
        List<SrgPaymentModel> srgPaymentModels = new ArrayList<>();
        SrgPaymentModel srgPaymentModel1 = new SrgPaymentModel();
        srgPaymentModel1.setId(1L);
        srgPaymentModel1.setProviderName("Broker1");
        srgPaymentModel1.setInvoiceReference("INV1,INV2");
        srgPaymentModel1.setSgEntity("SG1");
        srgPaymentModel1.setFeeCategory("Fee1");
        srgPaymentModel1.setProviderBdrId("BDR1");
        srgPaymentModel1.setValueDate("2023-10-26");
        srgPaymentModel1.setSendingDate("2023-10-25");
        srgPaymentModel1.setPaymentAmount(100.0);
        srgPaymentModel1.setPaymentCurrency("USD");
        srgPaymentModel1.setPaymentType("Type1");
        srgPaymentModel1.setDebitCredit("Debit");
        srgPaymentModel1.setPaymentMode("Mode1");
        srgPaymentModel1.setPaymentStatus("Status1");
        srgPaymentModel1.setRcCode("RC1");
        srgPaymentModel1.setComment("Comment1");
        srgPaymentModels.add(srgPaymentModel1);

        when(cashAllocationRepositoryApi.findPaymentLinesFromPaymentReferences(paymentReferences)).thenReturn(srgPaymentModels);
        when(cashAllocationRepositoryApi.getSsiDetails("BDR1", "USD", "SG1", "Fee1")).thenReturn(Arrays.asList("SSI1", "SSI2"));

        // Act
        List<PaymentLinesModel> result = cashAllocationDomain.getPaymentLinesFromPaymentReference(paymentReferences);

        // Assert
        assertEquals(1, result.size());
        PaymentLinesModel paymentLinesModel = result.get(0);
        assertEquals(1L, paymentLinesModel.getId());
        assertEquals("Broker1", paymentLinesModel.getBrokerName());
        assertEquals(2, paymentLinesModel.getNumberOfInvoices());
        assertEquals(2, paymentLinesModel.getNumberOfSSI());
        assertEquals("SG1", paymentLinesModel.getSgEntity());
        assertEquals("INV1,INV2", paymentLinesModel.getInvoiceReference());
        assertEquals("Fee1", paymentLinesModel.getFeeCategory());
        assertEquals("BDR1", paymentLinesModel.getProviderId());
        assertEquals("2023-10-26", paymentLinesModel.getValueDate());
        assertEquals("2023-10-25", paymentLinesModel.getSendingDate());
        assertEquals(100.0, paymentLinesModel.getAmount());
        assertEquals("USD", paymentLinesModel.getCurrency());
        assertEquals("Type1", paymentLinesModel.getInvoiceType());
        assertEquals("INV", paymentLinesModel.getFeeType());
        assertEquals("Debit", paymentLinesModel.getPaymentDirection());
        assertEquals("Mode1", paymentLinesModel.getPaymentMode());
        assertEquals("Status1", paymentLinesModel.getPaymentStatus());
        assertEquals("Type1", paymentLinesModel.getPaymentType());
        assertEquals("RC1", paymentLinesModel.getRc());
        assertEquals("Comment1", paymentLinesModel.getComment());
        assertEquals(Arrays.asList("SSI1", "SSI2"), paymentLinesModel.getSsiAccountCode());

        verify(cashAllocationRepositoryApi, times(1)).findPaymentLinesFromPaymentReferences(paymentReferences);
        verify(cashAllocationRepositoryApi, times(1)).getSsiDetails("BDR1", "USD", "SG1", "Fee1");
    }

    @Test
    void getPaymentLinesFromPaymentReference_shouldReturnEmptyList_whenNoPaymentLinesFound() {
        // Arrange
        String[] paymentReferences = {"REF1", "REF2"};
        when(cashAllocationRepositoryApi.findPaymentLinesFromPaymentReferences(paymentReferences)).thenReturn(new ArrayList<>());

        // Act
        List<PaymentLinesModel> result = cashAllocationDomain.getPaymentLinesFromPaymentReference(paymentReferences);

        // Assert
        assertEquals(0, result.size());
        verify(cashAllocationRepositoryApi, times(1)).findPaymentLinesFromPaymentReferences(paymentReferences);
        verify(cashAllocationRepositoryApi, never()).getSsiDetails(anyString(), anyString(), anyString(), anyString());
    }