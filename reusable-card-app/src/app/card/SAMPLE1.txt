 @Test
    void testCashAllocationModelList_SkipLine_Ignore2() {
        List<String> lines = new ArrayList<>();
        lines.add("2" + " ".repeat(58) + "T");
        String fileName = "DATA_REC_FILE";

        List<CashAllocationModel> result = cashAllocationDomain.cashAllocationModelList(lines, fileName);

        assertNotNull(result);
        assertEquals(0, result.size());
    }

    @Test
    void testCashAllocationModelList_SkipLine_IgnoreT() {
        List<String> lines = new ArrayList<>();
        lines.add(" ".repeat(58) + "T");
        String fileName = "DATA_REC_FILE";

        List<CashAllocationModel> result = cashAllocationDomain.cashAllocationModelList(lines, fileName);

        assertNotNull(result);
        assertEquals(0, result.size());
    }

    @Test
    void testCashAllocationModelList_SkipLine_GaiaNXG_AccountNumber1() {
        List<String> lines = new ArrayList<>();
        lines.add("1234" + " ".repeat(33) + " ".repeat(3) + " ".repeat(60));
        String fileName = "GAIA_NXG_FILE";
        Mockito.when(cashAllocationDomain.accountNumber).thenReturn("1234");

        List<CashAllocationModel> result = cashAllocationDomain.cashAllocationModelList(lines, fileName);

        assertNotNull(result);
        assertEquals(0, result.size());
    }

    @Test
    void testCashAllocationModelList_SkipLine_GaiaNXG_AccountNumber2() {
        List<String> lines = new ArrayList<>();
        lines.add("4321" + " ".repeat(33) + " ".repeat(3) + " ".repeat(60));
        String fileName = "GAIA_NXG_FILE";
        Mockito.when(cashAllocationDomain.accountNumber).thenReturn("4321");

        List<CashAllocationModel> result = cashAllocationDomain.cashAllocationModelList(lines, fileName);

        assertNotNull(result);
        assertEquals(0, result.size());
    }

    @Test
    void testCashAllocationModelList_SkipLine_GaiaNXG_E2E() {
        List<String> lines = new ArrayList<>();
        lines.add("300030497" + " ".repeat(33) + " ".repeat(3) + " ".repeat(60));
        String fileName = "GAIA_NXG_E2E_FILE";
        Mockito.when(cashAllocationDomain.accountNumber).thenReturn("300030497");

        List<CashAllocationModel> result = cashAllocationDomain.cashAllocationModelList(lines, fileName);

        assertNotNull(result);
        assertEquals(0, result.size());
    }

    @Test
    void testCashAllocationModelList_invoiceRef_shortLine() {
        List<String> lines = new ArrayList<>();
        lines.add(" ".repeat(116) + "1234");
        String fileName = "DATA_REC_FILE";
        Mockito.when(cashAllocationDomain.getInvoiceRefFromSupplementaryDetails(Mockito.anyString())).thenReturn("invoiceRef");
        Mockito.when(cashAllocationDomain.getCashAllocationModel(Mockito.anyString(), Mockito.any(BigDecimal.class), Mockito.anyString(), Mockito.anyString(), Mockito.any(Date.class), Mockito.anyString()))
            .thenReturn(new CashAllocationModel());

        List<CashAllocationModel> result = cashAllocationDomain.cashAllocationModelList(lines, fileName);

        assertNotNull(result);
        assertEquals(1, result.size());
    }

    @Test
    void testCashAllocationModelList_validFlow() throws Exception {
        List<String> lines = new ArrayList<>();
        lines.add(" ".repeat(21) + "12345678" + " ".repeat(57) + "10000" + " ".repeat(15) + " " + " ".repeat(2) + " ".repeat(21) + "12345678" + " ".repeat(116));
        String fileName = "DATA_REC_FILE";
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMdd");
        Date expectedDate = dateFormat.parse("12345678");

        Mockito.when(cashAllocationDomain.getCashAllocationModel(Mockito.anyString(), Mockito.any(BigDecimal.class), Mockito.anyString(), Mockito.anyString(), Mockito.any(Date.class), Mockito.anyString()))
            .thenReturn(new CashAllocationModel());

        List<CashAllocationModel> result = cashAllocationDomain.cashAllocationModelList(lines, fileName);

        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals(BigDecimal.valueOf(1000), result.get(0).getAmount());
    }