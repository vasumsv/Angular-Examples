  @BeforeEach
    void setUp() {
        // Initialize a sample payment list
        InvokePayableModelForPayment payment = new InvokePayableModelForPayment();
        payment.setProviderId("PROV123");
        payment.setTgCategory("CAT1");
        payment.setInvokePayable(new InvokePayable()); // Assume nested objects are properly initialized
        paymentList = Collections.singletonList(payment);
    }

    @Test
    void testGetRetredPaymentRowsForManualPayment_SinglePayment() {
        // Mock aggregated data (simulate fetchRetredRows behavior)
        GroupingKey key = new GroupingKey("ENTITY1", "USD");
        BigDecimal aggregatedAmount = new BigDecimal("1000");
        String references = "INV001,INV002";
        List<String> invoices = Arrays.asList("INV001", "INV002");

        // Mock service responses
        PaymentBates paymentDates = new PaymentBates("2023-10-01", "2023-10-02");
        when(referentialServiceApi.getPaymentBates(eq("ENTITY1"), eq("USD"), any()))
            .thenReturn(paymentDates);

        List<BapPayableModel> invoiceDetails = Collections.singletonList(
            new BapPayableModel("PORTFOLIO1")
        );
        when(invoiceServiceApi.getListOffagDetailsForMultipleInvoices(eq(invoices)))
            .thenReturn(invoiceDetails);

        PortfolioDetails portfolioDetails = new PortfolioDetails("CONTROL123");
        when(referentialServiceApi.getPortfolioDetailsBasedOnWhenonId(eq("PORTFOLIO1")))
            .thenReturn(portfolioDetails);

        List<SettlementsAccounts> settlementAccounts = Collections.singletonList(
            new SettlementsAccounts("ACC123")
        );
        when(referentialServiceApi.getSettlementAccounts(eq("USD"), eq("ENTITY1"), eq("CONTROL123")))
            .thenReturn(settlementAccounts);

        // Execute the method
        List<PaymentLinesModel> result = cashAllocationDomain.getRetredPaymentRowsForManualPayment(paymentList, user);

        // Verify results
        assertEquals(1, result.size());
        PaymentLinesModel model = result.get(0);
        assertEquals("ENTITY1", model.getSpatuity());
        assertEquals("PROV123", model.getProviderId());
        assertEquals("USD", model.getCurrency());
        assertEquals(new BigDecimal("1000"), model.getAmount());
        assertEquals("n", model.getPaymentDirection()); // Assuming positive amount
        assertEquals(1, model.getNumberOfSSI());
        assertEquals("r", model.getPaymentStatus()); // Last set status
    }