 @Test
    public void testGetNettedPaymentRowsForManualPayment_BadTestForLineCoverage() {
        // Arrange
        InvoicePayableModelForPayment invoice = new InvoicePayableModelForPayment();
        invoice.setInvoiceReference("ABC12345");
        invoice.setProviderId("123");
        invoice.setFeeCategory("456");

        List<InvoicePayableModelForPayment> paymentList = Arrays.asList(invoice);

        // Mock fetchNettedRows to populate maps
        doAnswer(invocation -> {
            Map<GroupingKey, BigDecimal> amountMap = invocation.getArgument(1);
            Map<GroupingKey, Integer> countMap = invocation.getArgument(2);
            Map<GroupingKey, String> refMap = invocation.getArgument(3);

            GroupingKey key = new GroupingKey("USD", "789");
            amountMap.put(key, BigDecimal.TEN);
            countMap.put(key, 1);
            refMap.put(key, "REF,");
            return null;
        }).when(cashAllocationDomain).fetchNettedRows(any(), any(), any(), any());

        // Mock referentialServiceApi to return values
        PaymentDates dates = new PaymentDates();
        when(referentialServiceApi.getPaymentDates(anyString(), anyString(), anyString(), anyString(), anyString(), anyString())).thenReturn(dates);

        BapPayableModel bap = new BapPayableModel();
        bap.setPortfolio("PORTFOLIO1");
        List<BapPayableModel> bapList = Arrays.asList(bap);
        when(invoiceServiceApi.getListOfBapDetailsForMultipleInvoices(any())).thenReturn(bapList);

        PortfolioAdvanceDetailResponse portfolioDetails = new PortfolioAdvanceDetailResponse();
        portfolioDetails.setCodTrs("BDR123");
        when(referentialServiceApi.getPortfolioDetailsBasedOnMnemonic(anyString())).thenReturn(portfolioDetails);

        SettlementsAccounts settlementAccount = new SettlementsAccounts();
        when(referentialServiceApi.getSettlementAccounts(anyString(), anyString(), anyString())).thenReturn(Arrays.asList(settlementAccount));

        // Act
        List<PaymentLinesModel> result = cashAllocationDomain.getNettedPaymentRowsForManualPayment(paymentList, "USER");

        // Assert (basic to confirm no exceptions)
        assertEquals(1, result.size());

        // --- Now, let's trigger different scenarios for line coverage ---

        // Test with negative amount
        doAnswer(invocation -> {
            Map<GroupingKey, BigDecimal> amountMap = invocation.getArgument(1);
            Map<GroupingKey, Integer> countMap = invocation.getArgument(2);
            Map<GroupingKey, String> refMap = invocation.getArgument(3);

            GroupingKey key = new GroupingKey("USD", "789");
            amountMap.put(key, new BigDecimal("-10"));
            countMap.put(key, 1);
            refMap.put(key, "REF,");
            return null;
        }).when(cashAllocationDomain).fetchNettedRows(any(), any(), any(), any());

        cashAllocationDomain.getNettedPaymentRowsForManualPayment(paymentList, "USER");
    }